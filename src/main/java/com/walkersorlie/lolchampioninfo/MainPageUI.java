/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.walkersorlie.lolchampioninfo;

import com.walkersorlie.lolchampioninfo.TableModels.ChampionTableModel;
import com.walkersorlie.lolchampioninfo.Champion.Champion;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.walkersorlie.lolchampioninfo.Champion.ChampionSpell;
import com.walkersorlie.lolchampioninfo.Champion.MultiNameChampionsEnum;
import com.walkersorlie.lolchampioninfo.Deserializers.ChampionsListDeserializer;
import com.walkersorlie.lolchampioninfo.TableModels.ChampionsListTableModel;
import com.walkersorlie.lolchampioninfo.TableModels.SpellsTableModel;
import java.io.IOException;
import java.net.ProtocolException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;

/**
 *
 * @author TexasRanger
 */
public class MainPageUI extends javax.swing.JFrame {

    /**
     * Creates new form MainPageUI
     */
    public MainPageUI() {
        initComponents();
        setChampionsListTableModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        championsListTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectChampionAttributeTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        displayChampionAttributeTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchField.setText("Search Champion...");
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        championsListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        championsListTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        championsListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                championsListTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(championsListTable);

        selectChampionAttributeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Information"
            }
        ));
        selectChampionAttributeTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        selectChampionAttributeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectChampionAttributeTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(selectChampionAttributeTable);

        displayChampionAttributeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        displayChampionAttributeTable.setFillsViewportHeight(true);
        jScrollPane3.setViewportView(displayChampionAttributeTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(214, 214, 214)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(84, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(129, 129, 129)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Initialize the championsListTable with its TableModel
     */
    private void setChampionsListTableModel() {
        championsListTable.setRowSelectionAllowed(true);
        ObjectMapper mapper = new ObjectMapper();
	SimpleModule module = new SimpleModule();
	module.addDeserializer(ArrayList.class, new ChampionsListDeserializer());
	mapper.registerModule(module);
        
        try {
            String response = NetworkRequest.sendGet("");
            championsList = mapper.readValue(response, ArrayList.class);
            championsListTable.setModel(new ChampionsListTableModel(championsList));
            
        } catch (ProtocolException ex) {
            Logger.getLogger(MainPageUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainPageUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(MainPageUI.class.getName()).log(Level.SEVERE, null, ex);
        }   	 
    }
    
    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        displayChampionAttributeTable.setModel(new DefaultTableModel());
        
        String champion = searchField.getText();
        String result = champion.trim();
//        result = result.substring(0, 1).toUpperCase() + result.substring(1).toLowerCase();
        result = MultiNameChampionsEnum.checkNameAndAliases(result.toLowerCase(), false);
        
        championsListTable.changeSelection(championsList.indexOf(result), 0, false, false);
        displayChampionAttributeTable(champion);
    }//GEN-LAST:event_searchFieldActionPerformed
    
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        displayChampionAttributeTable(searchField.getText());
    }//GEN-LAST:event_searchButtonActionPerformed
    
    /**
     * Display the attributes for this specific Champion in the selectChampionAttributeTable
     * @param evt 
     */
    private void championsListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_championsListTableMouseClicked
        javax.swing.JTable table = (javax.swing.JTable)evt.getSource();
        int row = table.getSelectedRow();
        int column = table.getSelectedColumn();
        
        displayChampionAttributeTable.setModel(new DefaultTableModel());
        searchField.setText((String)table.getValueAt(row, column));     
        
        
        ChampionsListTableModel value = (ChampionsListTableModel)table.getModel();
        
        displayChampionAttributeTable(value.getValueAt(row, column));
    }//GEN-LAST:event_championsListTableMouseClicked
    
    /**
     * Handle displaying the specific attribute table for the selected attribute
     * @param evt 
     */
    private void selectChampionAttributeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectChampionAttributeTableMouseClicked
        javax.swing.JTable table = (javax.swing.JTable)evt.getSource();
        int row = table.getSelectedRow();
        int column = table.getSelectedColumn();
        ChampionTableModel value = (ChampionTableModel)table.getModel();
        
        populateDisplayChampionAttributeTable(value.getCellTableModel(row, column));
    }//GEN-LAST:event_selectChampionAttributeTableMouseClicked
    
    /**
     * Display the specific attribute table for the selected attribute
     * @param championName 
     */
    private void displayChampionAttributeTable(String championName) {
        try {
            // Will do caching/database reading+writing here
            String response = NetworkRequest.sendGet(championName);

            Champion champion = new ObjectMapper().readValue(response, Champion.class);

            selectChampionAttributeTable.setModel(new ChampionTableModel(champion));
            selectChampionAttributeTable.changeSelection(0, 0, false, false);
            ChampionTableModel value = (ChampionTableModel)selectChampionAttributeTable.getModel();
            populateDisplayChampionAttributeTable(value.getCellTableModel(0, 0));
            
//            TableInTableRenderer renderer = new TableInTableRenderer();

//            for(int i = 0; i < selectChampionAttributeTable.getRowCount(); i++) {
//                Object value = selectChampionAttributeTable.getValueAt(i, 1);
//                javax.swing.JTable cell = (javax.swing.JTable)renderer.getTableCellRendererComponent(selectChampionAttributeTable, value, false, false, i, 1);
//                selectChampionAttributeTable.setValueAt(cell, i, 1);          
//            }
            
        } catch (ProtocolException ex) {
            Logger.getLogger(MainPageUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainPageUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(MainPageUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Populate the specific attribute table by setting the TableModel
     * @param tm 
     */
    private void populateDisplayChampionAttributeTable(TableModel tm) {
//        if(tm instanceof SpellsTableModel) {
//            System.out.println("instance");
//            TableColumn column0 = displayChampionAttributeTable.getColumnModel().getColumn(0);
//            column0.setPreferredWidth(40);
//            TableColumn column1 = displayChampionAttributeTable.getColumnModel().getColumn(1);
//            column1.setPreferredWidth(80);
//            TableColumn column2 = displayChampionAttributeTable.getColumnModel().getColumn(2);
//            column2.setPreferredWidth(300);
//            displayChampionAttributeTable.setAutoResizeMode(AUTO_RESIZE_LAST_COLUMN);
//        }
        displayChampionAttributeTable.setModel(tm);       
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPageUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainPageUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable championsListTable;
    private javax.swing.JTable displayChampionAttributeTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable selectChampionAttributeTable;
    // End of variables declaration//GEN-END:variables
    private ArrayList<String> championsList;

}
